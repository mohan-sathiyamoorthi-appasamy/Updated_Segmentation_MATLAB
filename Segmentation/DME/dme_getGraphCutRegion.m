%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  dme_getGraphCutRegion.m
%
%  Gets the indices of the image to be used during graph cut segmentation
%  for the specified layer
%
%--------------------------------------------------------------------------
%
%  function regionIndices = dme_getGraphCutRegion( ...
%      image, ...
%      layerNumber, ...
%      axialRes, ...
%      lateralRes, ...
%      iteration, ...
%      rpeTop, ...
%      rpeBottom, ...
%      layers)
%
%  INPUT PARAMETERS:
%
%       image - A [imageHeight x imageWidth] image to segment
%
%       layerNumber - The layer index to segment
%
%       axialRes - Axial (vertical) resolution of the image in um/pixel
%
%       lateralRes - Lateral (horizontal) resoution of the image in
%                    um/pixel
%
%       iteration - The ith graph cut iteration
%
%       rpeTop - A vector of size (1 x imageWidth) estimating the location
%                of the inner aspect of the RPE, generated by the
%                dme_getBwImage() function
%
%       rpeBottom - A vector of size (1 x imageWidth) estimating the 
%                   location of the outer aspect of the RPE, generated by
%                   the dme_getBwImage() function\
%
%       layers - A [nLayers x imageWidth] matrix where each column contains
%               the y-coordinates of a layer
%
%  RETURN VARIABLES:
%
%       regionIndices - Indices of the image that are in the region to
%                       segment for the specified layer
%
%--------------------------------------------------------------------------
%
%  Author:          Stephanie Chiu
%  Institution:     Duke University
%  Date Created:    2009.12.20
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function regionIndices = dme_getGraphCutRegion( ...
    image, ...
    layerNumber, ...
    axialRes, ...
    lateralRes, ...
    iteration, ...
    rpeTop, ...
    rpeBottom, ...
    layers)
    
    
    %----------------------------------------------------------------------
    %  Get the layer parameters if no previous imageLayers were input
    %----------------------------------------------------------------------

    imageSize = size(image);
    imageHeight = imageSize(1);
    imageWidth = imageSize(2);
    
    topLayerAddition = 0;
    bottomLayerAddition = 0;
    correctBottomLine = 0;
        
    switch (layerNumber)

        % cut vitreous-NFL
        case {1}            
            yTop = ones(1, imageWidth);
            yBottom = rpeTop;
            correctBottomLine = 1;

        % cut Bruchs
        case {3}
            yTop = nanmean([layers(1,:) + round(100/axialRes);rpeTop]);
            yBottom = imageHeight*ones(1, imageWidth);

        % cut OS-RPE
        case {2}            
            if all(isnan(layers(2,:)))
                yTop = nanmean([layers(1,:) + round(39/axialRes);rpeTop]) ;
                yBottom = round(smooth(layers(3,:),0.2)' - 20.1/axialRes);
            elseif iteration == 4
                lowSnrIndices = isnan(rpeTop) | isnan(rpeBottom);
                rpe = layers(2,:);
                rpe(lowSnrIndices) = NaN;
                bruchs = round(smooth(layers(3,:),0.2)');
                bruchs(lowSnrIndices) = NaN;
            	rpe = dme_findRpe(image,axialRes,lateralRes,rpe,bruchs);
                
                yTop = rpe - round(13.4/axialRes);
                yBottom = rpe;
                correctBottomLine = 1;
            elseif iteration == 5
                yTop = layers(2,:);
                yBottom = layers(2,:) + round(6.7/axialRes);
                yBottom = min(yBottom, round(smooth(layers(3,:),0.2)' - 13.4/axialRes));
            end
            
        otherwise
            error('Segmentation of layer %d is not supported', layerNumber);
    end

    
    %----------------------------------------------------------------------
    %  Handle cases where the input layer is NaN or empty.
    %----------------------------------------------------------------------
 
    nanIndices = isnan(yTop);   
    if sum(nanIndices) > 0
        yTop(nanIndices) = ones(1,sum(nanIndices));
    end
    
    nanIndices = isnan(yBottom);   
    if sum(nanIndices) > 0
        yBottom(nanIndices) = imageHeight*ones(1,sum(nanIndices));
    end


    %----------------------------------------------------------------------
    %  Make the region smaller with respect to the selected minimum 
    %  distance between lines
    %----------------------------------------------------------------------

    regionIndices = getRegion( ...
        imageSize, ...
        yTop, ...
        yBottom, ...
        topLayerAddition, ...
        bottomLayerAddition, ...
        [], ...
        correctBottomLine);
end