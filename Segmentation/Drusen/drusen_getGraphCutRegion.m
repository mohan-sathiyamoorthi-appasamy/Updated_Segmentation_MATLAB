%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  drusen_getGraphCutRegion.m
%
%  Gets the indices of the image to be used during graph cut segmentation
%  for the specified layer
%
%--------------------------------------------------------------------------
%
%  function regionIndices = drusen_getGraphCutRegion( ...
%      image, ...
%      layerNumber, ...
%      axialRes, ...
%      lateralRes, ...
%      iteration, ...
%      rpeTop, ...
%      rpeBottom, ...
%      invalidIndices, ...
%      layers)
%
%  INPUT PARAMETERS:
%
%       image - A [imageHeight x imageWidth] image to segment
%
%       layerNumber - The layer index to segment
%
%       axialRes - Axial (vertical) resolution of the image in um/pixel
%
%       lateralRes - Lateral (horizontal) resoution of the image in
%                    um/pixel
%
%       iteration - The ith graph cut iteration
%
%       rpeTop - A vector of size (1 x imageWidth) estimating the location
%                of the inner aspect of the RPE, generated by the
%                drusen_getBwImage() function
%
%       rpeBottom - A vector of size (1 x imageWidth) estimating the 
%                   location of the outer aspect of the RPE, generated by
%                   the drusen_getBwImage() function
%
%       invalidIndices - A vector of image indices that should be ignored
%                        and not considered during graph cut
%
%       layers - A [nLayers x imageWidth] matrix where each column contains
%               the y-coordinates of a layer
%
%  RETURN VARIABLES:
%
%       regionIndices - Indices of the image that are in the region to
%                       segment for the specified layer
%
%--------------------------------------------------------------------------
%
%  Author:          Stephanie Chiu
%  Institution:     Duke University
%  Date Created:    2009.12.20
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function regionIndices = drusen_getGraphCutRegion( ...
    image, ...
    layerNumber, ...
    axialRes, ...
    lateralRes, ...
    iteration, ...
    rpeTop, ...
    rpeBottom, ...
    invalidIndices, ...
    layers)
    
    
    %----------------------------------------------------------------------
    %  Get the layer parameters if no previous imageLayers were input
    %----------------------------------------------------------------------

    imageSize = size(image);
    imageHeight = imageSize(1);
    imageWidth = imageSize(2);
    
    topLayerAddition = 0;
    bottomLayerAddition = 0;
    correctBottomLine = 0;
        
    switch (layerNumber)

        % cut vitreous-NFL
        case {1}            
            yTop = ones(1, imageWidth);
            yBottom = rpeTop;
            correctBottomLine = 1;

        % cut Bruchs
        case {3}            
            if all(isnan(layers(3,:))) 
                yTop = rpeTop;
                yBottom = rpeBottom + round(33.5 / axialRes);
            else
                yTop = max(rpeTop,layers(3,:));
                yTop(isnan(rpeTop) | isnan(rpeBottom)) = 1;
                yBottom = imageHeight * ones(1, imageWidth);
            end

        % cut OS-RPE
        case {2}            
            if all(isnan(layers(2,:)))
                ilm = layers(1,:) + round(20.1/axialRes);
                rpe = rpeTop - round(67/axialRes);
                yTop = nanmax(ilm, rpe);
                yBottom = layers(3,:) - round(6.7/axialRes);
            elseif iteration == 5
                yTop = layers(2,:) - round(46.9/axialRes);
                yBottom = layers(2,:);
            elseif iteration == 6
                lowSnrIndices = isnan(rpeTop) | isnan(rpeBottom);
                rpe = layers(2,:);
                rpe(lowSnrIndices) = NaN;
                bruchs = nanmin(layers(3,:), rpeBottom + round(6.7/axialRes));
                bruchs(lowSnrIndices) = NaN;
            	rpe = drusen_findRpe(image,axialRes,lateralRes,rpe,bruchs);
                
                yTop = rpe - round(20.1/axialRes);
                yBottom = rpe;
                correctBottomLine = 1;
            end
            
        otherwise
            error('Segmentation of layer %d is not supported', layerNumber);
    end

    
    %----------------------------------------------------------------------
    %  Handle cases where the input layer is NaN or empty.
    %----------------------------------------------------------------------
 
    nanIndices = isnan(yTop);   
    if sum(nanIndices) > 0
        yTop(nanIndices) = ones(1,sum(nanIndices));
    end
    
    nanIndices = isnan(yBottom);   
    if sum(nanIndices) > 0
        yBottom(nanIndices) = imageHeight*ones(1,sum(nanIndices));
    end


    %----------------------------------------------------------------------
    %  Make the region smaller with respect to the selected minimum 
    %  distance between lines
    %----------------------------------------------------------------------

    regionIndices = getRegion( ...
        imageSize, ...
        yTop, ...
        yBottom, ...
        topLayerAddition, ...
        bottomLayerAddition, ...
        invalidIndices, ...
        correctBottomLine);
end