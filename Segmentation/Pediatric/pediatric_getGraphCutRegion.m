%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  pediatric_getGraphCutRegion.m
%
%  Gets the indices of the image to be used during graph cut segmentation
%  for the specified layer
%
%--------------------------------------------------------------------------
%
%  function regionIndices = pediatric_getGraphCutRegion( ...
%      image, ...
%      layerNumber, ...
%      axialRes, ...
%      rpeTop, ...
%      foveaParams, ...
%      invalidIndices, ...
%      layers)
%
%  INPUT PARAMETERS:
%
%       image - A [imageHeight x imageWidth] image to segment
%
%       layerNumber - The layer index to segment
%
%       axialRes - Axial (vertical) resolution of the image in um/pixel
%
%       rpeTop - A vector of size (1 x imageWidth) estimating the location
%                of the inner aspect of the RPE, generated by the
%                pediatric_getBwImage() function
%
%       foveaParams - A structure containing information about the fovea,
%                     obtained by calling the locateFovea() function
%
%       invalidIndices - A vector of image indices that should be ignored
%                        and not considered during graph cut
%
%       layers - A [nLayers x imageWidth] matrix where each column contains
%               the y-coordinates of a layer
%
%  RETURN VARIABLES:
%
%       regionIndices - Indices of the image that are in the region to
%                       segment for the specified layer
%
%--------------------------------------------------------------------------
%
%  Author:          Stephanie Chiu (stephanie.chiu@duke.edu)
%  Institution:     Duke University
%  Date Created:    2009.12.20
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function regionIndices = pediatric_getGraphCutRegion( ...
    image, ...
    layerNumber, ...
    axialRes, ...
    rpeTop, ...
    foveaParams, ...
    invalidIndices, ...
    layers)
    
    
    %----------------------------------------------------------------------
    %  Get the layer parameters if no previous imageLayers were input
    %----------------------------------------------------------------------

    imageSize = size(image);
    imageHeight = imageSize(1);
    imageWidth = imageSize(2);
    
    topLayerAddition = 0;
    bottomLayerAddition = 0;
    correctBottomLine = 0;
        
    switch (layerNumber)

        % vitreous-NFL
        case {1}            
            yTop = ones(1,imageWidth);
            yBottom = rpeTop;

        % cut IS-OS
        case {6}            
            if all(isnan(layers(3,:))) 
                yTop = layers(1,:) + round(13/axialRes);
                yBottom = imageHeight*ones(1,imageWidth);
            else
                yBottom = max(layers(6,:), layers(7,:)-round(6.5/axialRes));
                yTop = yBottom - round(26/axialRes);
            end

        % cut bruch's membrane
        case {8}          
            yTop = layers(6,:) + round(13/axialRes);
            yBottom = layers(6,:) + round(97.5/axialRes);
            correctBottomLine = 1;

        % cut os-rpe
        case {7}
            yTop = layers(8,:) - round(26/axialRes);
            yBottom = layers(8,:) - round(13/axialRes);

        % cut choroid
        case {9}
            yTop = layers(8,:) + round(32.5/axialRes);
            yBottom = imageHeight * ones(1,imageWidth);
            
        % cut 
        case {5}
            if all(isnan(layers(5,:)))
                yTop = layers(6,:) - round(71.5/axialRes);
                yBottom = layers(6,:);
                edemaInd = layers(6,:) - layers(1,:) > round(487.5/axialRes);
                yTop(edemaInd) = yBottom(edemaInd) - round(65/axialRes);
            else
                yTop = layers(4,:) + 1;
                yBottom = layers(4,:) + 5;
                if foveaParams.Index ~= 0   
                    range = zeros(1,imageWidth);
                    range(foveaParams.Range(1):foveaParams.Range(2)) = 1;
                    yTop(range==1) = layers(4,range==1);
                    yTop(range==0) = layers(5,range==0) - 2;
                end
                
                correctBottomLine = 0;   
            end
            
        % cut 
        case {3}                
            thickness = layers(5,:) - layers(1,:);               
            yTop = layers(1,:) + round(thickness/4);
            yBottom = layers(5,:) - 5;

            margin = round(imageWidth / 4);
            middleInd = margin:imageWidth-margin;
            yTop(middleInd) = layers(1,middleInd) + round(thickness(middleInd)/4);
               
            correctBottomLine = 1;

        % cut 
        case {4}
            yTop = layers(5,:)-5;
            yBottom = layers(5,:)-1;
            correctBottomLine = 1;
            
            margin = round(imageWidth / 4);
            difference = layers(3,:) - layers(1,:);
            middleInd = zeros(1,imageWidth);
            middleInd(margin:imageWidth-margin) = 1;
            difference(~middleInd) = max(difference);
            foveaRange = find(difference == min(difference) & middleInd);
            if ~isempty(foveaRange)
                foveaRange = foveaRange(round(length(foveaRange)/2));
                ind = foveaRange-10:foveaRange+10;
                yBottom(ind) = yTop(ind) + min(difference);
            end

        % cut 
        case {2}            
            if all(isnan(layers(2,:)))
                yTop = layers(1,:);
                yBottom = max(layers(3,:) - 4, layers(1,:) + 2);

                if foveaParams.Index ~= 0
                    range = foveaParams.Range(1):foveaParams.Range(2);
                    yBottom(range) = layers(1,range) + 3;
                end
            else
                yTop = layers(1,:);
                yBottom = layers(2,:);
                
                if foveaParams.Index ~= 0
                    leftRange = 1:foveaParams.Range(1);
                    thickness = layers(2,leftRange) - layers(1,leftRange);
                    if mean(thickness) <= 3
                        yBottom(leftRange) = layers(1,leftRange) + 3;
                    end                    
                    rightRange = foveaParams.Range(2):imageWidth;
                    thickness = layers(2,rightRange) - layers(1,rightRange);
                    if mean(thickness) <= 3
                        yBottom(rightRange) = layers(1,rightRange) + 3;
                    end
                end
            end
            correctBottomLine = 1;
            
        otherwise
            error('Segmentation of layer %d is not supported', layerNumber);
    end

    
    %----------------------------------------------------------------------
    %  Handle cases where the input layer is NaN or empty.
    %----------------------------------------------------------------------
 
    nanIndices = isnan(yTop);   
    if sum(nanIndices) > 0
        yTop(nanIndices) = ones(1,sum(nanIndices));
    end
    
    nanIndices = isnan(yBottom);   
    if sum(nanIndices) > 0
        yBottom(nanIndices) = imageHeight*ones(1,sum(nanIndices));
    end


    %----------------------------------------------------------------------
    %  Make the region smaller with respect to the selected minimum 
    %  distance between lines
    %----------------------------------------------------------------------

    regionIndices = getRegion( ...
        imageSize, ...
        yTop, ...
        yBottom, ...
        topLayerAddition, ...
        bottomLayerAddition, ...
        invalidIndices, ...
        correctBottomLine);
end